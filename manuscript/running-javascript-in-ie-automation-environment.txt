## Running Javascript in O2's IE Automation environment

[O2](http://o2platform.com) has quite a good support for Javascript editing and execution. It is able to from handle simple script execution to full two-data-exchange and invocation between O2 and the Browser (in this case IE) Lets start with a simple script execution. Open the _**IE Script Execution**_ script (which can be found on the main O2 Gui at the _**Security Analysis **_Tab via the _**IE  Automation **_button): [![](images/tmp1265-tmp.jpeg)](http://o2platform.files.wordpress.com/2011/03/tmp1265-tmp.jpeg)  The image above shows what happens when the following default script is executed: [sourcecode language="csharp" wraplines="false"] panel.clear(); var ie = panel.add_IE().silent(true);ie.open("<a href="http://www.google.com">http://www.google.com</a>"); //O2File:WatiN_IE_ExtensionMethods.cs //using O2.XRules.Database.Utils.O2 //O2Ref:WatiN.Core.1x.dll [/sourcecode] To make sure that all is ok, lets run a simple test (in this case a simple Javascript alert) [sourcecode language="csharp" wraplines="false"] ie.open("<a href="http://www.google.com">http://www.google.com</a>"); ie.invokeEval("alert('hello')"); [/sourcecode] [![](images/tmp8353-tmp.jpeg)](http://o2platform.files.wordpress.com/2011/03/tmp8353-tmp.jpeg) **If this doesn't work, the most likely reason is because the site you are trying to open is not on IE's trusted site list.** To address this issue you have three choices:  

  1. go to IE and add it here
  2. use this O2 Script: [O2 Util: Add sites to IE trusted zone](http://o2platform.wordpress.com/2011/03/04/o2-util-add-sites-to-ie-trusted-zone/) (Note that at the moment the IE instance running inside O2 is not picking up the zone change, so you will need to restart O2)
  3. run the following script in the current O2 script environment, or on another script (also needs O2 restart) [sourcecode language="csharp" wraplines="false"] "yahoo.com".makeDomainTrusted("uk"); // will add the domain <a href="http://uk.yahoo.com">http://uk.yahoo.com</a> to IE's trusted zone [/sourcecode]

As the name says the _ie.**invokeEval **_method will invoke the provided script via an javasript eval command. The javascript executed can be as complex has you want. Here are a couple simple examples: **Swapping DWR's logo with O2's Logo** [sourcecode language="csharp" wraplines="false"] ie.open("<a href="http://www.directwebremoting.org/">http://www.directwebremoting.org/</a>"); ie.invokeEval("document.images[0].src='http://o2platform.googlecode.com/svn/trunk/O2_Scripts/_DataFiles/_Images/O2_Logo.gif';"); [/sourcecode]   **Showing up a popup alert with the user's submited search** (the return false prevents the form from being submited) [sourcecode language="csharp" wraplines="false"] ie.open("<a href="http://www.google.com/">http://www.google.com/</a>"); ie.invokeEval("document.forms[0].onsubmit = function() {alert('you submited the query: ' + document.forms[0].q.value);return false;};"); [/sourcecode] ** Creating a new javascript function and invoking it** [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function() { alert('this is a new function')} ; myFunction();");   // invoking it on the same eval //ie.invokeEval("myFunction();");   // can also be invoked here [/sourcecode] ** Invoking the new javascript function using O2's InvokeScript method** There is another way to invoke javascript functions which is to the use the _**ie.invokeScript**_ O2 method (instead of using _**ie.InvokeEval**_) [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function() { alert('this is a new function')}"); ie.invokeScript("myFunction"); [/sourcecode]   **Passing Dynamic values from C# to Javascript** (i.e. invoking javascript functions with dynamic data) The _**ie.invokeScript**_ method can be used to invoke javascript methods that expect parameters [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function(name) { alert('hello ' + name)}"); ie.invokeScript("myFunction", "john"); [/sourcecode] [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function(name1, name2) { alert('hello ' + name1 + ' and ' + name2)}"); ie.invokeScript("myFunction", "john", "paul"); [/sourcecode] ** Getting the return value of a function** ** **The most powerful capability of the _**ie.invokeScript**_ function is that it can be used to access the return value of a function (with the added bonus that C# types will be translated into javascript types). For example this script will return 42 [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function(a, b) { return a+b;}"); return ie.invokeScript("myFunction", 10, 32); [/sourcecode] and this one will return 1032 [sourcecode language="csharp" wraplines="false"] ie.invokeEval("myFunction = function(a, b) { return a+b;}"); return ie.invokeScript("myFunction", "10", "32"); [/sourcecode] ** Invoking C# method from Javascript** For really advanced analysis and injection you probably will want to have javascript functions/scripts that are able to callback into an O2/C# function. For example the following code will inject a javascript function into the current page that can be used to send a message to the O2 Log Viewer: [![](images/tmp2a2d-tmp.jpeg)](http://o2platform.files.wordpress.com/2011/03/tmp2a2d-tmp.jpeg) To undestand how this happens, here are the relevant O2 C# functions (that are part of the _WatiN_IE_ExtensionMethods.cs _script) [sourcecode language="csharp" wraplines="false"]         public static WatiN_IE injectJavascriptFunctions(this WatiN_IE ie)         {             if (ie.WebBrowser.isNull())                 "in InjectJavascriptFunctions, ie.WebBrowser was null".error();             else             {                 if (ie.WebBrowser.ObjectForScripting.isNull())                     ie.WebBrowser.ObjectForScripting = new WatiN_IE.ToCSharp();                                     "Injecting Javascript Hooks * Functions for page: {0}".debug(ie.url());                 ie.eval("var o2Log = function(message) { window.external.write(message) };");                 ie.invokeScript("o2Log","Test from Javascript (via toCSharp(message) )");                 "Injection complete".info();             }             return ie;         } [/sourcecode] [sourcecode language="csharp" wraplines="false"] [System.Runtime.InteropServices.ComVisible(true)]         public class ToCSharp         {                         public void write(string message)             {                 "[IE to ToCSharp] : {0}".info(message);             }                         public string ping(string message)             {                 "[ping from IE] : {0}".info(message);                 return "pong: " + message;             }             ....         } [/sourcecode]
