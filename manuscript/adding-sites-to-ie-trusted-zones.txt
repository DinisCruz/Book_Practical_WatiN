## O2 Method: Adding sites to IE trusted zones

One of the pains of using WatiN is the fact that IE protected zone will complain for websites that use scripts from other websites. The solution is to make those websites part of the trusted zone. I don't like this but it seems to be the only way for it to work. After doing the 4 click process that is adding this in IE, I decided to write add the following methods to O2 so that we can now do this programatically (note parts of this script were based on the solution in [this StackOverflow entry](http://stackoverflow.com/questions/972345/programmatically-add-trusted-sites-to-internet-explorer/2675081)): [sourcecode language="csharp" wraplines="false"]     //REGISTRY     public static class RegistryKeyExtensionMethods     {            public static string makeDomainTrusted(this string rootDomain, string subDomain)         {             try             {                                var ieKeysLocation = @&amp;quot;Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\&amp;quot;;                 //var domainsKeyLocation =  ieKeysLocation + &amp;quot;Domains&amp;quot;;                 var domainsKeyLocation =  ieKeysLocation + &amp;quot;EscDomains&amp;quot;;                                var trustedSiteZone = 0x2;                 RegistryKey currentUserKey = Registry.CurrentUser;                 currentUserKey.getOrCreateSubKey(domainsKeyLocation, rootDomain, false);                 currentUserKey.createSubDomainKeyAndValue(domainsKeyLocation, rootDomain, subDomain, &amp;quot;http&amp;quot;,trustedSiteZone);                 currentUserKey.createSubDomainKeyAndValue(domainsKeyLocation, rootDomain, subDomain, &amp;quot;https&amp;quot;,trustedSiteZone);                 var message = &amp;quot;Added as truted the domain: {1}.{0}&amp;quot;.format(rootDomain,subDomain);                 return message;             }             catch(Exception ex)             {                 ex.log(&amp;quot;in makeDomainTrusted&amp;quot;);                 return ex.Message;             }         }             public static RegistryKey getOrCreateSubKey(this RegistryKey registryKey, string parentKeyLocation, string key, bool writable)         {             string keyLocation = string.Format(@&amp;quot;{0}\{1}&amp;quot;, parentKeyLocation, key);             RegistryKey foundRegistryKey = registryKey.OpenSubKey(keyLocation, writable);             return foundRegistryKey ?? registryKey.createSubKey(parentKeyLocation, key);         }         public static RegistryKey createSubKey(this RegistryKey registryKey, string parentKeyLocation, string key)         {             RegistryKey parentKey = registryKey.OpenSubKey(parentKeyLocation, true); //must be writable == true             if (parentKey == null)                  throw new NullReferenceException(string.Format(&amp;quot;Missing parent key: {0}&amp;quot;, parentKeyLocation));             RegistryKey createdKey = parentKey.CreateSubKey(key);             if (createdKey == null)                 throw new Exception(string.Format(&amp;quot;Key not created: {0}&amp;quot;, key));             return createdKey;         }                 //IE Specific         public static void createSubDomainKeyAndValue(this RegistryKey currentUserKey, string domainsKeyLocation, string domain, string subDomainKey, string subDomainValue, int zone)         {             RegistryKey subdomainRegistryKey = currentUserKey.getOrCreateSubKey(string.Format(@&amp;quot;{0}\{1}&amp;quot;, domainsKeyLocation, domain), subDomainKey, true);             object objSubDomainValue = subdomainRegistryKey.GetValue(subDomainValue);             if (objSubDomainValue == null || Convert.ToInt32(objSubDomainValue) != zone)                            subdomainRegistryKey.SetValue(subDomainValue, zone, RegistryValueKind.DWord);                   }     }   [/sourcecode] This can now be consumed like this (code sample from the updated API_WordPress.cd) [sourcecode language="csharp" wraplines="false"]     public static class WordPressAPI_ExtensionMethods_IE_Utils     {      public static API_WordPress addRequiredSitesToIETrustedZone(this API_WordPress wordPress)      {       &amp;quot;o2platform&amp;quot;.makeDomainTrusted(&amp;quot;com&amp;quot;);       &amp;quot;stats.wordpress.com&amp;quot;.makeDomainTrusted(&amp;quot;s&amp;quot;);       &amp;quot;scorecardresearch.com&amp;quot;.makeDomainTrusted(&amp;quot;b&amp;quot;);       &amp;quot;wp.com&amp;quot;.makeDomainTrusted(&amp;quot;sp1&amp;quot;);       &amp;quot;wp.com&amp;quot;.makeDomainTrusted(&amp;quot;s2&amp;quot;);       &amp;quot;wp.com&amp;quot;.makeDomainTrusted(&amp;quot;s1&amp;quot;);       &amp;quot;wp.com&amp;quot;.makeDomainTrusted(&amp;quot;s0&amp;quot;);       &amp;quot;quantserve.com&amp;quot;.makeDomainTrusted(&amp;quot;edge&amp;quot;);       &amp;quot;gravatar.com&amp;quot;.makeDomainTrusted(&amp;quot;s&amp;quot;);             return wordPress;      }     } [/sourcecode]
